name: Docker Image CD

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CLONE_URL: https://github.com/${{github.repository}}.git


      BRANCH: ${{ github.ref_name }}
      EXPOSED_PORT: ${{vars.EXPOSED_PORT || 8085}}
      IMAGE_NAME: ${{github.repository}}

    steps:
      - name: Get repository meta info.
        id: meta
        run : |
          echo "repository_name=$(basename ${{ github.repository }})" >> $GITHUB_OUTPUT
        shell: bash

      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: BRANCH,EXPOSED_PORT,IMAGE_NAME
          script: |
            echo "Starting script..."
            
            # this code is due to ssh-action@v0.1.8 run a non-login shell and won't inherit any env var in /etc/profile or ~/.bashrc
            exec bash \-l
            ~/set_proxy
            env 
            wget youtube.com

            ### Update and fetch from repository
            cd ~
            [ -d projects ] || mkdir projects
            cd projects

            WORKING_DIR=${{ github.repository_owner }}_${{ steps.META.outputs.repository_name }}
            [ -d ${WORKING_DIR} ] || mkdir "${WORKING_DIR}"
            cd ${WORKING_DIR}
            echo "Changed directory to ${WORKING_DIR}."

            [ -d ${BRANCH} ] || git clone -b ${BRANCH} ${{env.CLONE_URL}} ./${BRANCH} && echo "fetching ${BRANCH} from ${{env.CLONE_URL}}"
            cd ${BRANCH}
            echo "Changed directory to ${BRANCH}."

            git fetch --all --verbose | tee mylog.txt
            git reset --hard origin/${BRANCH}
            echo "Git fetch and reset complete."

            ### Update clash_config
            wget -O ./config/clash_config.yaml ${{secrets.CLASH_CONFIG_URL}}

            ### Build and run docker

            IMAGE_NAME=$(echo ${IMAGE_NAME} | tr '[:upper:]' '[:lower:]')
            echo "Updating url-wrapper service..."
            docker compose down
            docker compose up -d --build
            echo "start listening on ${EXPOSED_PORT}"
            docker image prune -f
        