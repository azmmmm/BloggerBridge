name: Docker Image CD

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on:  ubuntu-latest
    env:
      CLONE_URL: https://github.com/${{github.repository}}.git
      BRANCH: ${{ github.ref_name }}
      IMAGE_NAME: ${{github.repository}}
      EXPOSED_PORT: ${{ (github.ref == 'refs/heads/main') && '8085' || '8086' }}
    steps:
      - name: Get repository meta info.
        id: meta
        run : |
          echo "repository_name=$(basename ${{ github.repository }})" >> $GITHUB_OUTPUT
        shell: bash

      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: BRANCH,EXPOSED_PORT,IMAGE_NAME
          script: |
            
            
            
            bash -l -c "$(cat <<- 'EOF'
            ### this code is due to ssh-action@v0.1.8 run a non-login shell and won't inherit any env var in /etc/profile or ~/.bashrc
            ### and using a here-document with single-quoted delimiter, so that variable will be expanded in the bash, not before.

            ### Update and fetch from repository
            cd ~
            [ -d projects ] || mkdir projects
            cd projects

            export PROJECT_NAME=${{ github.repository_owner }}_${{ steps.META.outputs.repository_name }}
            [ -d ${PROJECT_NAME} ] || mkdir "${PROJECT_NAME}"
            cd ${PROJECT_NAME}
            echo "Changed directory to ${PROJECT_NAME}."

            [ -d ${BRANCH} ] || git clone -b ${BRANCH} ${{env.CLONE_URL}} ./${BRANCH} && echo "fetching ${BRANCH} from ${{env.CLONE_URL}}"
            cd ${BRANCH}
            echo "Changed directory to ${BRANCH}."

            git fetch --all --verbose 
            git reset --hard origin/${BRANCH}
            echo "Git fetch and reset complete."

            ### Update clash_config
            wget -O ./config/clash_config.yaml ${{secrets.CLASH_CONFIG_URL}}

            ### Build and run docker

            export IMAGE_NAME=$(echo ${IMAGE_NAME} | tr '[:upper:]' '[:lower:]')
            echo "Updating ${IMAGE_NAME} service..."
            docker compose pull url-wrapper
            docker compose down
            docker compose up -d --build
            echo "start listening on ${EXPOSED_PORT}"
            
        
            # this code is the close of previous bash -l -c 
            EOF
            )"
